name: CI

on:
  push:
    branches: [ main ]
  pull_request:

permissions:
  contents: read
  pull-requests: write

jobs:
  lint-and-unit:
    name: Lint and Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install just
        run: |
          sudo apt-get update
          sudo apt-get install -y just
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -e .[full]
      - name: Run lint
        run: |
          just lint
      - name: Run core test suite
        run: |
          just test

  spacewalker:
    name: Spacewalker Integration Tests
    runs-on: ubuntu-latest
    needs: lint-and-unit
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install just
        run: |
          sudo apt-get update
          sudo apt-get install -y just
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -e .[full]
      - name: Run Spacewalker integration suite
        env:
          MIMIR_SPACEWALKER_METRICS: ${{ github.workspace }}/spacewalker-metrics.json
        run: |
          just test spacewalker
      - name: Upload metrics artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: spacewalker-metrics
          path: spacewalker-metrics.json
      - name: Comment metrics on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = 'spacewalker-metrics.json';
            if (!fs.existsSync(path)) {
              core.info('No metrics file produced; skipping comment.');
              return;
            }
            const data = JSON.parse(fs.readFileSync(path, 'utf8'));
            const formatSeconds = value => typeof value === 'number' ? value.toFixed(2) : String(value);
            const list = value => Array.isArray(value) && value.length ? value.join(', ') : 'â€”';
            const fmtIndex = run => `- ${run.label}: ${run.metadata.total_documents} docs, ${formatSeconds(run.metadata.build_time)}s (success ${run.metadata.success_rate_percent}%)`;
            const fmtSearch = run => `- ${run.label}: hits ${list(run.hit_paths)} in ${formatSeconds(run.elapsed_seconds)}s`;
            const fmtTelemetry = run => `- ${run.label}: queries=${run.summary.query_logs}, stages=${run.summary.pipeline_stages}, llm_calls=${run.summary.llm_calls}`;

            const lines = [];
            lines.push('### Spacewalker integration metrics');
            if (data.index_runs?.length) {
              lines.push('\n**Index builds**');
              data.index_runs.forEach(run => lines.push(fmtIndex(run)));
            }
            if (data.search_runs?.length) {
              lines.push('\n**Search runs**');
              data.search_runs.forEach(run => lines.push(fmtSearch(run)));
            }
            if (data.telemetry_runs?.length) {
              lines.push('\n**Telemetry**');
              data.telemetry_runs.forEach(run => lines.push(fmtTelemetry(run)));
            }
            if (lines.length <= 1) {
              core.info('Metrics payload was empty; skipping comment.');
              return;
            }
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: lines.join('\n'),
            });
